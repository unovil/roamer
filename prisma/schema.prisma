// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  firstName      String
  lastName       String
  school         School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  role           UserRole  @default(STUDENT)
  admin          Admin?    @relation(name: "AdminToUser")
  student        Student?  @relation(name: "StudentToUser")
  schoolId       Int?
  sessions       Session[]
  hashedPassword String
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model School {
  id         Int         @id @default(autoincrement())
  sections   Section[]   @relation(name: "SchoolToSection")
  facilities Facility[]  @relation(name: "FacilityToSchool")
  equipments Equipment[] @relation(name: "EquipmentToSchool")
  name       String
  depedId    String      @unique @db.Char(6)
  user       User[]
}

model Section {
  id       Int       @id @default(autoincrement())
  grade    Int
  name     String    @unique
  students Student[] @relation(name: "SectionToStudent")
  school   School    @relation(name: "SchoolToSection", fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId Int
}

model Admin {
  id         Int         @id @default(autoincrement())
  user       User        @relation(name: "AdminToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @unique
  facilities Facility[]  @relation(name: "FacilityToAdmin")
  equipments Equipment[] @relation(name: "EquipmentToAdmin")
  requests   Request[]   @relation(name: "AdminToRequest")

  /// [Departments]
  departments Json
}

model Student {
  id        Int       @id @default(autoincrement())
  lrn       String    @unique @db.Char(12)
  user      User      @relation(name: "StudentToUser", fields: [userId], references: [id], onDelete: Cascade)
  section   Section   @relation(name: "SectionToStudent", fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int
  userId    String    @unique
  requests  Request[] @relation(name: "StudentToRequest")
}

model Facility {
  id          Int        @id @default(autoincrement())
  schoolId    Int
  school      School     @relation(name: "FacilityToSchool", fields: [schoolId], references: [id], onDelete: Cascade)
  admins      Admin[]    @relation(name: "FacilityToAdmin")
  name        String
  description String     @db.Text
  image       String
  department  Department @default(MISCELLANEOUS)
  requests    Request[]  @relation(name: "FacilityToRequest")

  /// [RangeDates]
  blockedDates Json
}

model Equipment {
  id          Int        @id @default(autoincrement())
  schoolId    Int
  school      School     @relation(name: "EquipmentToSchool", fields: [schoolId], references: [id], onDelete: Cascade)
  name        String
  admins      Admin[]    @relation(name: "EquipmentToAdmin")
  description String     @db.TinyText
  image       String
  department  Department @default(MISCELLANEOUS)
  requests    Request[]  @relation(name: "EquipmentToRequest")

  /// [RangeDates]
  blockedDates Json
}

model Request {
  id            Int           @id @default(autoincrement())
  description   String        @db.TinyText
  facility      Facility?     @relation(name: "FacilityToRequest", fields: [facilityId], references: [id], onDelete: Cascade)
  equipment     Equipment?    @relation(name: "EquipmentToRequest", fields: [equipmentId], references: [id], onDelete: Cascade)
  students      Student[]     @relation(name: "StudentToRequest")
  admins        Admin[]       @relation(name: "AdminToRequest")
  dateCreated   DateTime      @default(now())

  facilityId  Int?
  equipmentId Int?

  /// [RangeDates]
  requestDates Json

  /// [RequestStatuses]
  requestStatus Json
}

enum UserRole {
  STUDENT
  ADMIN
}

enum Department {
  GENERALPURPOSE
  MAPEH
  SCIENCE
  MULTIMEDIA
  MISCELLANEOUS
}