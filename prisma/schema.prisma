// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

model User {
  id         String   @id @default(cuid())
  email      String?  @unique
  // image      String?
  firstName  String
  middleName String?
  lastName   String
  password   String
  school     School?  @relation(fields: [schoolId], references: [id])
  role       UserRole @default(STUDENT)
  admin      Admin?   @relation(name: "AdminToUser")
  student    Student? @relation(name: "StudentToUser")
  schoolId   Int?
  // Account    Account[]
  // Session    Session[]
}

model School {
  id         Int         @id @default(autoincrement())
  sections   Section[]   @relation(name: "SchoolToSection")
  facilities Facility[]  @relation(name: "FacilityToSchool")
  equipments Equipment[] @relation(name: "EquipmentToSchool")
  name       String
  user       User[]
}

model Section {
  id       Int       @id @default(autoincrement())
  grade    Int
  name     String    @unique
  students Student[] @relation(name: "SectionToStudent")
  school   School    @relation(name: "SchoolToSection", fields: [schoolId], references: [id])
  schoolId Int
}

model Admin {
  id         Int        @id @default(autoincrement())
  user       User       @relation(name: "AdminToUser", fields: [userId], references: [id])
  userId     String     @unique
  facilities Facility[] @relation(name: "FacilityToAdmin")
  requests   Request[]  @relation(name: "AdminToRequest")

  /// [DepartmentsType]
  departments Json
}

model Student {
  id        Int       @id @default(autoincrement())
  lrn       String    @unique @db.Char(12)
  user      User      @relation(name: "StudentToUser", fields: [userId], references: [id])
  section   Section   @relation(name: "SectionToStudent", fields: [sectionId], references: [id])
  sectionId Int
  userId    String    @unique
  requests  Request[] @relation(name: "StudentToRequest")
}

model Facility {
  id         Int        @id @default(autoincrement())
  schoolId   Int
  school     School     @relation(name: "FacilityToSchool", fields: [schoolId], references: [id])
  admins     Admin[]    @relation(name: "FacilityToAdmin")
  name       String
  department Department @default(MISC)
  requests   Request[]  @relation(name: "FacilityToRequest")

  /// [DatesType]
  blockedDates Json
}

model Equipment {
  id         Int        @id @default(autoincrement())
  schoolId   Int
  school     School     @relation(name: "EquipmentToSchool", fields: [schoolId], references: [id])
  name       String
  department Department @default(MISC)
  requests   Request[]  @relation(name: "EquipmentToRequest")

  /// [DatesType]
  blockedDates Json
}

model Request {
  id          Int         @id @default(autoincrement())
  description String
  facilities  Facility[]  @relation(name: "FacilityToRequest")
  equipments  Equipment[] @relation(name: "EquipmentToRequest")
  students    Student[]   @relation(name: "StudentToRequest")
  isAllowed   Boolean     @default(false)
  admins      Admin[]     @relation(name: "AdminToRequest")

  /// [DatesType]
  requestDates Json
}

enum UserRole {
  STUDENT
  ADMIN
}

enum Department {
  SCIENCE
  MATH
  MAPEH
  MISC
  LANGUAGE
}
